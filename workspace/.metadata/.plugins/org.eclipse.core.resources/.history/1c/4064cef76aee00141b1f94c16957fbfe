package ufc.quixada.trocandoideias.bd;

import java.util.ArrayList;
import java.util.List;

import android.content.ContentValues;
import android.content.Context;
import android.database.Cursor;
import android.database.SQLException;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteOpenHelper;
import android.util.Log;

public class DatabaseAdapter{

	private static final String TAG = "TrocandoIdeiasDB";
	
	private static final int DB_VERSION = 1;
	private static final String DB_NAME = "TrocandoIdeias";
	
	public static final String TABLE_USUARIO = "usuario";
	public static final String ID = "id";
	public static final String COL_NOME = "nome";
	public static final String COL_EMAIL = "email";
	public static final String COL_SENHA = "senha";
	
	private DatabaseHelper helper;
	private static SQLiteDatabase db;
	
	public DatabaseAdapter(Context context) {
		helper = new DatabaseHelper(context);
	}	
	
	public static class DatabaseHelper extends SQLiteOpenHelper{
		
		public DatabaseHelper(Context context) {
			super(context, DB_NAME, null, DB_VERSION);
		}
		
		@Override
		public void onCreate(SQLiteDatabase db) {
			createTable(db);
		}

		@Override
		public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) {
			  Log.w(TAG, "Upgrading database. Existing contents will be lost. ["
		                + oldVersion + "] -> [" + newVersion + "]");
		 
		      db.execSQL("DROP TABLE IF EXISTS " + TABLE_USUARIO);
		      createTable(db);
		}
		
		private void createTable(SQLiteDatabase db) {
			String CREATE_TABLE_USUARIO =  "CREATE TABLE " + TABLE_USUARIO
		            + " (" + ID + " INTEGER PRIMARY KEY AUTOINCREMENT, "
		            + COL_NOME + " TEXT NOT NULL, "
		            + COL_EMAIL + " TEXT NOT NULL, "
		            + COL_SENHA + " TEXT NOT NULL);";
			try {
				db.execSQL(CREATE_TABLE_USUARIO);
			} catch (SQLException e) {
				e.printStackTrace();
			}

		}

	}
	
	public DatabaseAdapter open() throws SQLException {
		db = helper.getWritableDatabase();
		return this;
	}

	public void close() {
		helper.close();
		db.close();
	}

	public long insertUsuario(String email, String login, String senha) {
		ContentValues values = new ContentValues();
		values.put(COL_EMAIL, email);
		values.put(COL_NOME, login);
		values.put(COL_SENHA, senha);
		return db.insert(TABLE_USUARIO, null, values);
	}
	
	public Cursor getAllUsersNames() {
		return db.rawQuery("SELECT nome FROM usuario", null);
	}
	
	public Cursor getUserByName(String usuario){
		return db.rawQuery("SELECT nome FROM usuario WHERE nome = ?",
				new String[] { usuario });
	}
	
	public String getSenha(String usuario){
		
		List<String> senhas = new ArrayList<String>();
		Cursor cursor = db.rawQuery("SELECT senha FROM usuario WHERE nome = ?", 
				new String[]{ usuario });
    	
    	while (cursor.moveToNext()) {
    		senhas.add(cursor.getString(cursor.getColumnIndex(DatabaseAdapter.COL_SENHA)));
    	} 
		
		
		
		return senhas.get(0);
	}
	
}	
